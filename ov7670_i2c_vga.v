
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ov7670_i2c_vga(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,
	
	//////////// SDRAM ////////
	output [12:0] DRAM_ADDR,
	output [1:0] DRAM_BA,
	output DRAM_CAS_N,
	output DRAM_CKE,
	output DRAM_CLK,
	output DRAM_CS_N,
	inout [15:0] DRAM_DQ,
	output DRAM_LDQM,
	output DRAM_RAS_N,
	output DRAM_UDQM,
	output DRAM_WE_N,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);

wire RESET_N;
assign RESET_N = KEY[0];

wire HREF;
assign HREF = GPIO[22];
wire VSYNC;
assign VSYNC = GPIO[23];
wire PCLK;
assign PCLK = GPIO[21];

wire MCLK;
assign GPIO[20] = MCLK;//mclk - 20

wire D0;
assign D0 = GPIO[12];
wire D1;
assign D1 = GPIO[13];
wire D2;
assign D2 = GPIO[14];
wire D3;
assign D3 = GPIO[15];
wire D4;
assign D4 = GPIO[16];
wire D5;
assign D5 = GPIO[17];
wire D6;
assign D6 = GPIO[18];
wire D7;
assign D7 = GPIO[19];

wire CAMERA_RST;
assign GPIO[11] = CAMERA_RST;
wire PWDN;
assign GPIO[10] = PWDN;


wire NEW_LINE;
wire NEW_FRAME;
wire PIXEL_VALID;

wire [15:0] pixel_out;
//=======================================================
//  REG/WIRE declarations
//=======================================================

ov7670_interface oi0(
	.clk(CLOCK_50), //50MHz fpga clock
	.reset_n(RESET_N),
	.sda(GPIO[24]),
	.scl(GPIO[25]), 
	.pclk(PCLK), //pixel clock
	.href(HREF),
	.vsync(VSYNC),
	.blank_n(VGA_BLANK_N),
	.data_pins({D7,D6,D5,D4,D3,D2,D1,D0}), //d7 - d0 pins
	.pixel_out(fifo_0_in_data), //output pixel
	.camera_reset(CAMERA_RST), //reset pin
	.mclk(MCLK), //24MHz clock from master
	.pixel_valid(PIXEL_VALID),
	.pwdn(PWDN)//pwdn pin
	//.ack(ack),
	//.LEDR(LEDR)
	
);

wire out_pixel_valid;

image_processor ip(
	.write_clk(PCLK),
	.process_clk(PCLK),
	.reset_n(RESET_N),
	.kernel_switch(KEY[1]),
	.pixel_valid(PIXEL_VALID),
	.pixel_in(fifo_0_in_data),
	
	.out_pixel(sdram_in_data),
	.out_pixel_valid(out_pixel_valid),
);

wire [15:0] fifo_0_in_data;
wire [15:0] sdram_out_data;
wire [15:0] sdram_in_data;

wire fifo_0_out_ready;

wire re;
wire vga_en;
wire sdram_wr_full;
wire op_clk;

fpga_sdram_frame_buffer fbr0(
	.clk(CLOCK_50),
	.reset_n(RESET_N),
	.write_clk(PCLK),
	.read_clk(MCLK),
	.vga_en(vga_en),
	.write_data(sdram_in_data),
	.we(out_pixel_valid),
	.wr_full(sdram_wr_full),
	.read(fifo_0_out_ready),
	.op_clk(op_clk),
	.re(re),
	.read_data(sdram_out_data),
	
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	
);

vga_interface vi0(
	.clk(CLOCK_50),
	.pclk(MCLK),
	.reset_n(RESET_N),
	.pixel_in(sdram_out_data),
	.pixel_out_ready(fifo_0_out_ready),
	.re(re),
	.VGA_R(VGA_R),
	.VGA_G(VGA_G),
	.VGA_B(VGA_B),
	.VGA_VS(VGA_VS),
	.VGA_HS(VGA_HS),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_CLK(VGA_CLK),
	.VGA_BLANK_N(VGA_BLANK_N)
);

endmodule
